openapi: 3.0.3
info:
  title: Team Dev Server API
  description: |-
  version: '1.0'

servers:
  - url: http://localhost:4000/
tags:
  - name: user
  - name: post
  - name: cohort
  - name: log
  - name: comment
paths:
  /users/{id}/update:
    put:
      tags:
        - user
      summary: Update logged-in user
      description: Updates the information of the user corressponding with the provided ID. A teacher can update any user while a student can only update themselves.
      operationId: updateLoggedInUser
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'ID of user to update. '
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                firstName:
                  type: string
                lastName:
                  type: string
                email:
                  type: string
                bio:
                  type: string
                githubUsername:
                  type: string
                password:
                  type: string
              required:
                - email
                - password
      responses:
        '201':
          description: User updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  message:
                    type: string
  /users:
    post:
      tags:
        - user
      summary: Create user
      description: Create new user
      operationId: createUser
      requestBody:
        description: User registration details
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateUser'
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
    get:
      tags:
        - user
      summary: Get all users by first name if provided
      description: ''
      operationId: getAllUsers
      security:
        - bearerAuth: []
      parameters:
        - name: firstName
          in: query
          description: Search all users by first name if provided (case-sensitive and exact string matches only)
          schema:
            type: string
      responses:
        '200':
          description: successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllUsers'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /login:
    post:
      tags:
        - user
      summary: Localhost Login
      description: ''
      operationId: loginUser
      requestBody:
        description: User login information
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/login'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/loginRes'

        '400':
          description: Invalid username/password supplied

  /users/{id}:
    get:
      tags:
        - user
      summary: Get user by user id
      description: ''
      operationId: getUserByID
      security:
        - bearerAuth: [ ]
      parameters:
        - name: id
          in: path
          description: 'User ID to fetch.'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    type: object
                    properties:
                      user:
                        $ref: '#/components/schemas/User'
        '400':
          description: Invalid request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: User not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    patch:
      tags:
        - user
      summary: Update a user
      description: Only users with a TEACHER role can update the cohortId or role. Users with Students role can only update their own details.
      operationId: userUpdate
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The user id that needs to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: The profile info
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UpdateUser'
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CreatedUser'
        '401':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /posts:
    post:
      tags:
        - post
      summary: Create post
      description: This can only be done by the logged in user.
      operationId: createPost
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Post'
        400:
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    get:
      tags:
        - post
      summary: Get all posts
      description: get all posts
      operationId: getPosts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Posts'
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /posts/{id}:
    get: 
      tags:
        - post
      summary: Get a post
      description: Get a post by id
      operationId: getPostById
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'Id of the post'
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Post'
        '404':
          description: post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
    put: 
      tags:
        - post
      summary: Update a post
      description: Update a post
      operationId: updatePostById
      security:
        - bearerAuth: []
      requestBody:
        description: Created post object
        content:
          application/json:
            schema:
              type: object
              properties:
                content:
                  type: string
                  example: "My First Post!"
      parameters:
        - name: id
          in: path
          description: 'Id of the post'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
               $ref: '#/components/schemas/Post'
        '400':
          description: id not found in parameter or content not found in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: post not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '500': 
          description: server error
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /logs:
    post:
      tags:
        - log
      summary: Create delivery log
      description: This can only be done by an authorised teacher user.
      operationId: createLog
      security:
        - bearerAuth: []
      requestBody:
        description: Created log object
        content:
          application/json:
            schema:
              type: object
              properties:
                date:
                  type: string
                cohortId:
                  type: integer
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      content:
                        type: string
      responses:
        201:
          description: success
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Log'
        '401':
          description: Unauthorised
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
  /cohorts:
    post:
      tags:
        - cohort
      summary: Create a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: createCohort
      security:
        - bearerAuth: []
      requestBody:
        description: Request body for creating a cohort
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: 'Software developement'
                startDate:
                  type: string
                  example: '2024-11-01'
                endDate:
                  type: string
                  example: '2024-11-31'
      responses:
        '201':
          description: success
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/Cohort'
        '400':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: must be teacher role to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'

    get:
      tags:
        - cohort
      summary: Get all cohorts
      description: Get all cohorts
      operationId: getCohorts
      security:
        - bearerAuth: []
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllCohorts'

  /cohorts/{id}:
    delete:
      tags:
        - cohort
      summary: Delete a cohort
      description: ''
      operationId: deleteCohort
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The cohort id to be deleted'
          required: true
          schema:
            type: string
      responses:
        '201':
          description: successful operation
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    $ref: '#/components/schemas/User'

        '400':
          description: Missing id in request
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: authorization fail
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'

    put:
      tags:
        - cohort
      summary: Update a cohort
      description: Update a cohort
      operationId: updateCohort
      security:
        - bearerAuth: []
      parameters:
        - name: id
          in: path
          description: 'The cohort id to be updated'
          required: true
          schema:
            type: string
      requestBody:
        description: Request body for adding a user to a cohort
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                startDate:
                  type: string
                endDate:
                  type: string
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Cohort'
        '403':
          description: must be teacher role to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'

  /cohorts/addUser:
    post:
      tags:
        - cohort
      summary: Adds a user to a cohort
      description: This can only be done by the logged in user with role TEACHER.
      operationId: addUserToCohort
      security:
        - bearerAuth: []
      requestBody:
        description: Request body for adding a user to a cohort
        content:
          application/json:
            schema:
              type: object
              properties:
                cohortId:
                  type: integer
                  example: 1
                userId:
                  type: integer
                  example: 1
      responses:
        '201':
          description: Successfully added the user to cohort
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                  data:
                    properties:
                      cohort:
                        $ref: '#/components/schemas/CohortIdAndUserId'
        '400':
          description: cohortId or userId missing in request body
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '404':
          description: user or cohort was not found
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'
        '403':
          description: must be teacher role to perform this action
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/403Error'

  /comments:
    post:
      tags:
        - comment
      summary: Create a new comment
      description: Allows a logged-in user to create a comment.
      operationId: createComment
      security:
        - bearerAuth: []
      requestBody:
        description: Comment creation payload
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateComment'
      responses:
        '201':
          description: Comment successfully created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/CommentResponse'
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

  /comments/post/{postId}:
    get:
      tags:
        - comment
      summary: Retrieve all comments from a post
      description: Get a list of all comments on a post.
      operationId: getAllComments
      security:
        - bearerAuth: []
      responses:
        '200':
          description: A list of comments
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AllComments'
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Error'

components:
  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
  schemas:
    Post:
      type: object
      properties:
        status:
          type: string
        data:
              properties:
                id:
                  type: integer
                content:
                  type: string
                  example: 'My first post!'
                createdAt:
                  type: string
                  example: '2024-10-30T13:43:38.440Z'
                updatedAt:
                  type: string
                  example: '2024-10-30T13:43:38.440Z'
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 1
                    cohortId:
                      type: integer
                    role:
                      type: string
                    firstName:
                      type: string
                    lastName:
                      type: string
                    bio:
                      type: string
                    githubUsername:
                      type: string
                    profileImageUrl:
                      type: string

    Cohort:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
        startDate:
          type: string
          format: string
        endDate:
          type: string
          format: string
        users:
          type: array
          items:
            $ref: '#/components/schemas/UserNoCohorts'

    CohortNoUser:
      type: object
      properties:
        id:
          type: integer
        name:
          type: string
        createdAt:
          type: string
          format: string
        updatedAt:
          type: string
          format: string
        startDate:
          type: string
          format: string
        endDate:
          type: string
          format: string

    CohortIdAndUserId:
      type: object
      properties:
        cohortId:
          type: integer
          example: 1
        userId:
          type: integer
          example: 1

    AllCohorts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            cohorts:
              type: array
              items:
                $ref: '#/components/schemas/Cohort'

    AllUsers:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            users:
              type: array
              items:
                $ref: '#/components/schemas/User'

    User:
      type: object
      properties:
        id:
          type: integer
        email:
          type: string
        role:
          type: string
        cohortId:
          type: integer
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        specialism:
          type: string
        username:
          type: string
        githubUsername:
          type: string
        profilePicture:
          type: string
        mobile:
          type: string

    UserNoCohorts:
      type: object
      properties:
        id:
          type: integer
          email:
            type: string
          role:
            type: string
          cohortId:
            type: integer
          firstName:
            type: string
          lastName:
            type: string
          bio:
            type: string
          specialism:
            type: string
          username:
            type: string
          githubUsername:
            type: string
          profilePicture:
            type: string
          mobile:
            type: string

    CreateUser:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    UpdateUser:
      type: object
      properties:
        firstName:
          type: string
        lastName:
          type: string
        bio:
          type: string
        username:
          type: string
        githubUsername:
          type: string
        profilePicture:
          type: string
        mobile:
          type: string

    Posts:
      type: object
      properties:
        status:
          type: string
        data:
          type: object
          properties:
            posts:
              type: array
              items:
                type: object
                properties:
                      id:
                        type: integer
                      content:
                        type: string
                        example: 'My first post!'
                      createdAt:
                        type: string
                        example: '2024-10-30T13:43:38.440Z'
                      updatedAt:
                        type: string
                        example: '2024-10-30T13:43:38.440Z'
                      author:
                        type: object
                        properties:
                          id:
                            type: integer
                            example: 1
                          cohortId:
                            type: integer
                          role:
                            type: string
                          firstName:
                            type: string
                          lastName:
                            type: string
                          bio:
                            type: string
                          githubUsername:
                            type: string
                          profileImageUrl:
                            type: string

    CreatedUser:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          properties:
            user:
              properties:
                id:
                  type: integer
                email:
                  type: string
                cohortId:
                  type: integer
                role:
                  type: string
                firstName:
                  type: string
                lastName:
                  type: string
                bio:
                  type: string
                username:
                  type: string
                githubUsername:
                  type: string
                profilePicture:
                  type: string
                mobile:
                  type: string
    login:
      type: object
      properties:
        email:
          type: string
        password:
          type: string

    loginRes:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            token:
              type: string
            user:
              $ref: '#/components/schemas/User'
    Error:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            error:
              type: string

    403Error:
      type: object
      properties:
        status:
          type: string
          example: 'fail'
        data:
          properties:
            authorization:
              type: string
              example: 'You are not authorized to perform this action'

    Log:
      type: object
      properties:
        status:
          type: string
        data:
          properties:
            log:
              properties:
                id:
                  type: integer
                cohortId:
                  type: integer
                date:
                  type: string
                author:
                  type: object
                  properties:
                    id:
                      type: integer
                    firstName:
                      type: string
                    lastName:
                      type: string
                lines:
                  type: array
                  items:
                    type: object
                    properties:
                      id:
                        type: integer
                      content:
                        type: string
    CreateComment:
      type: object
      properties:
        content:
          type: string
          description: The content of the comment
        postId:
          type: integer
          description: The ID of the post to which the comment belongs

    CommentResponse:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            comment:
              $ref: '#/components/schemas/Comment'

    AllComments:
      type: object
      properties:
        status:
          type: string
          example: success
        data:
          type: object
          properties:
            comments:
              type: array
              items:
                $ref: '#/components/schemas/Comment'

    Comment:
      type: object
      properties:
        id:
          type: integer
        content:
          type: string
        postId:
          type: integer
        author:
          type: object
          properties:
            id:
              type: integer
            firstName:
              type: string
            lastName:
              type: string
        createdAt:
          type: string
          format: date-time
        updatedAt:
          type: string
          format: date-time